/*
 ============================================================================
 Name        : csci_proj1.c
 Author      : Tristan Lawler and Jared Siecinski
 Version     :
 Copyright   : Your copyright notice
 Description : Print all processes currently running in tree format
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>

//recursive function that takes a process pid and an indent amount, prints out the process with said pid,
//and looks through all other processes, recursively calling the function for all children of the process
//
//the method of reading the proc files is the same as in the main
int printProc(int currParent, int indent) {
	struct dirent *de;

	DIR *dr = opendir("/proc");

	if (dr == NULL)
	{
		printf("Couldn't open directory");
		return 0;

	}
	int pid;
	char pname[50];
	int ppid;
	int vmsize;
	char cha1;
	int prevpid = 0;
	FILE *fp;
	while ((de = readdir(dr)) != NULL)
	{
		char init [200];
		memset(init, NULL, 199);
		de-> d_name;
		strcat(init, "/proc/");
		strcat(init, (de->d_name));
		strcat(init, "/stat");
		fp = fopen(init, "r");
		if(fp == NULL){}
		else
		{
			fscanf(fp, "%d %s %c %d %d %d %d %d %d", &pid, &pname, &cha1, &ppid, &vmsize,&vmsize,&vmsize,&vmsize,&vmsize);
            fclose(fp);
			if(ppid == currParent){
                int i;
                for(i=0;i<indent;i++){
                    printf("-");
                }
                printf("%d %s %d kb\n", pid, pname, vmsize);
                printProc(pid, indent+1);
			}
	}
	}
	return 0;
}


int main(void) {
	struct dirent *de;

        //open directory to the /proc folder
		DIR *dr = opendir("/proc");

        //if the proc folder doesn't then end the program
		if (dr == NULL)
		{
			printf("Couldn't open directory");
			return 0;

		}

		//various variables
		int pid;
		char pname[50];
		int ppid;
		int vmsize;
		char cha1;
		int prevpid = 0;
		FILE *fp;

		//read all of the process stat files
		while ((de = readdir(dr)) != NULL)
		{

            //create the file path string
			char init [200];
			memset(init, NULL, 199);
			de-> d_name;
			strcat(init, "/proc/");
			strcat(init, (de->d_name));
			strcat(init, "/stat");

			//open file
			fp = fopen(init, "r");


			if(fp == NULL){}
			else
			{

                //read the file and strore the info in the corresponding variables
				fscanf(fp, "%d %s %c %d %d %d %d %d %d", &pid, &pname, &cha1, &ppid, &vmsize,&vmsize,&vmsize,&vmsize,&vmsize);
				//need to close the file before going into the function so the function can reopen the file
                fclose(fp);
				if(ppid==0 && *pname != NULL){
                    printf("%d %s %d kb\n", pid, pname, vmsize);
                    printProc(pid,1);
				}

		}
}
closedir(dr);
return 0;
}
